apply plugin: 'com.android.application'

android {

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion '28.0.3'

    signingConfigs {

        config {
            keyAlias 'TKMKey'
            keyPassword 'Z5g3yqgZZyuCpSfANITG'
            storeFile file('../TKMKeyStore.jks')
            storePassword 'dE3kTCQc3vKMdDNN5nGe'
        }
    }

    defaultConfig {

        applicationId "com.example.peter.thekitchenmenu"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        resConfigs "en" // Add any other language support here
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
    }

    dataBinding.enabled = true

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "mock"

    productFlavors {

        mock {
            applicationIdSuffix = ".mock"
            dimension "mock"
        }

        prod {
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->

        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {

            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {

        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppcompat"
    implementation "androidx.recyclerview:recyclerview:$androidxRecyclerView"
    implementation "androidx.cardview:cardview:$androidxSupportVersion"
    implementation "androidx.exifinterface:exifinterface:$androidxSupportVersion"
    implementation "androidx.legacy:legacy-support-v4:$androidxSupportVersion"
    implementation "androidx.browser:browser:$androidxSupportVersion"
    implementation "com.google.android.material:material:$androidMaterial"

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$androidxLifecycleExtensions"
    implementation "androidx.lifecycle:lifecycle-runtime:$androidxLifecycleRuntime"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$androidxArchComponentsVersion"

    // Room
    implementation "androidx.room:room-runtime:$androidxRoomVersion"
    annotationProcessor "androidx.room:room-compiler:$androidxRoomVersion"

    // Paging
    implementation "androidx.paging:paging-runtime:$androidxPagingRuntimeVersion"

    // Constraint layout
    implementation "androidx.constraintlayout:constraintlayout:$androidxConstraintLayoutVersion"

    // A library that will hold the application logic
    implementation project(':TKMAppLibrary')

    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // Picasso TODO - Replace with Glide
    implementation "com.squareup.picasso:picasso:$picassoVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    // Play services
    implementation "com.google.android.gms:play-services-ads-identifier:$playServicesA"
    implementation "com.google.android.gms:play-services-auth-api-phone:$playServicesA"
    implementation "com.google.android.gms:play-services-auth-base:$playServicesA"
    implementation "com.google.android.gms:play-services-phenotype:$playServicesA"
    implementation "com.google.android.gms:play-services-auth:$playServicesB"
    implementation "com.google.android.gms:play-services-base:$playServicesC"
    implementation "com.google.android.gms:play-services-stats:$playServicesB"
    implementation "com.google.android.gms:play-services-flags:$playServicesB"
    implementation "com.google.android.gms:play-services-tasks:$playServicesB"
    implementation "com.google.android.gms:play-services-basement:$playServicesC"

    // Firebase
    implementation "com.google.firebase:firebase-database:$firebaseDatabase"
    implementation "com.google.firebase:firebase-core:$firebaseCore"
    implementation "com.google.firebase:firebase-auth:$firebaseAuth"
    implementation "com.google.firebase:firebase-storage:$firebaseStorage"
    implementation "com.google.firebase:firebase-config:$firebaseConfigVersion"

    //////// Firebase UI ////////
    implementation "com.firebaseui:firebase-ui-auth:$firebaseUiAuth"

    // Allows direct binding of data to display
    implementation "com.firebaseui:firebase-ui-database:$firebaseUiAuth"

    //////// TESTING ////////
    // Core library
    testImplementation "junit:junit:$rootProject.ext.junit"
    androidTestImplementation "androidx.test:core:$androidxTestCore"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$androidxTestRunner"
    androidTestImplementation "androidx.test:rules:$androidxTestRules"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$androidxTestExtJunit"

    // Espresso UI Testing dependencies.
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$androidxEspresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$androidxEspresso"

    testImplementation "org.mockito:mockito-all:$mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$powerMockito"

    testImplementation "org.hamcrest:hamcrest-all:$hamcrest"
}

// Reads the configuration information in app/google-services.json
apply plugin: 'com.google.gms.google-services'

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "androidx.annotation:annotation:$androidxSupportVersion"
}
