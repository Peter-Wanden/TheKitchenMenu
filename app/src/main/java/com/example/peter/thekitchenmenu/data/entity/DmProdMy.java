package com.example.peter.thekitchenmenu.data.entity;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.firebase.database.Exclude;

import java.util.HashMap;
import java.util.Map;

import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import static com.example.peter.thekitchenmenu.data.entity.DmProdComm.PROD_COMM_REMOTE_REF_ID;
import static com.example.peter.thekitchenmenu.data.entity.DmProdMy.TABLE_PROD_MY;

/**
 * This is the DmProdMy model. A POJO made flexible with Firebase and Room annotations along with
 * a fully parcelable implementation.
 */
@Entity(tableName = TABLE_PROD_MY)
public class DmProdMy implements Parcelable {

    public static final String TAG = "DmProdMy";

    public static final String TABLE_PROD_MY = "product_my";
    public static final String PROD_MY_ID = "_id";
    public static final String PROD_MY_COMM_ID = "_comm_id";
    public static final String PROD_MY_USED_REMOTE_ID = "fbUsedProductsUserKey";
    public static final String PROD_MY_RETAILER = "retailer";
    public static final String PROD_MY_LOC_ROOM = "locationRoom";
    public static final String PROD_MY_LOC_IN_ROOM = "locationInRoom";
    public static final String PROD_MY_PACK_PRICE = "packPrice";
    public static final String PROD_MY_LOCAL_IMAGE_URI = "localImageUri";
    public static final String PROD_MY_CREATE_DATE = "my_create_date";
    public static final String PROD_MY_LAST_UPDATE = "my_last_updated";

    @Exclude // Exclude field from Firebase, as is only required for Room.
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = PROD_MY_ID)
    private int id;

    // Relates to the community_product table, field _id.
    @Exclude // Exclude field from Firebase, as is only required for Room.
    @ColumnInfo(name = PROD_MY_COMM_ID)
    private int communityProductId;

    // DmProdMy fields.
    @ColumnInfo(name = PROD_MY_USED_REMOTE_ID)
    private String fbUsedProductsUserKey;

    @ColumnInfo(name = PROD_COMM_REMOTE_REF_ID)
    private String fbProductReferenceKey;

    @ColumnInfo(name = PROD_MY_RETAILER)
    private String retailer;

    @ColumnInfo(name = PROD_MY_LOC_ROOM)
    private String locationRoom;

    @ColumnInfo(name = PROD_MY_LOC_IN_ROOM)
    private String locationInRoom;

    @ColumnInfo(name = PROD_MY_PACK_PRICE)
    private double packPrice;

    @ColumnInfo(name = PROD_MY_LOCAL_IMAGE_URI)
    @NonNull
    private String localImageUri = "";

    @ColumnInfo(name = PROD_MY_CREATE_DATE)
    private long myCreateDate;

    @ColumnInfo(name = PROD_MY_LAST_UPDATE)
    private long myLastUpdate;

    /* Empty constructor as required by Firebase. */
    @Ignore
    public DmProdMy(){}

    /**
     * Constructor for FireBase and Room.
     * @param id A unique ID, auto generated by Room for this instance.
     * @param communityProductId {@link DmProdComm} foreign key.
     *
     * @param fbProductReferenceKey The {@link DmProdComm} to which this product relates to.
     * @param fbUsedProductsUserKey Keeps a count of times a products is used in Firebase.
     * @param localImageUri The local Uri for the image this user associates with this product.
     * @param locationRoom The room in the users hous where they store this product.
     * @param locationInRoom The location within the room where the users stores this product.
     * @param packPrice The price the user pays for this product.
     * @param retailer The retailer the user uses to acquire this product.
     *
     * @param myCreateDate The date when this user created, or added this product.
     * @param myLastUpdate The date when this user last updated this product details.
     */
    public DmProdMy(int id,
                    int communityProductId,
                    String fbUsedProductsUserKey,
                    String fbProductReferenceKey,
                    String retailer,
                    String locationRoom,
                    String locationInRoom,
                    double packPrice,
                    String localImageUri,
                    long myCreateDate,
                    long myLastUpdate) {

        this.id = id;
        this.communityProductId = communityProductId;
        this.fbUsedProductsUserKey = fbUsedProductsUserKey;
        this.fbProductReferenceKey = fbProductReferenceKey;
        this.retailer = retailer;
        this.locationRoom = locationRoom;
        this.locationInRoom = locationInRoom;
        this.packPrice = packPrice;
        this.localImageUri = localImageUri;
        this.myCreateDate = myCreateDate;
        this.myLastUpdate = myLastUpdate;
    }

    @Ignore
    public DmProdMy(Parcel in) {
        id = in.readInt();
        communityProductId = in.readInt();
        fbUsedProductsUserKey = in.readString();
        fbProductReferenceKey = in.readString();
        retailer = in.readString();
        locationRoom = in.readString();
        locationInRoom = in.readString();
        packPrice = in.readDouble();
        localImageUri = in.readString();
        myCreateDate = in.readLong();
        myLastUpdate = in.readLong();
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeInt(id);
        parcel.writeInt(communityProductId);
        parcel.writeString(fbUsedProductsUserKey);
        parcel.writeString(fbProductReferenceKey);
        parcel.writeString(retailer);
        parcel.writeString(locationRoom);
        parcel.writeString(locationInRoom);
        parcel.writeDouble(packPrice);
        parcel.writeString(localImageUri);
        parcel.writeLong(myCreateDate);
        parcel.writeLong(myLastUpdate);
    }

    @Exclude
    public Map<String, Object> productMyToMap() {

        HashMap<String, Object> result = new HashMap<>();

        result.put(PROD_MY_USED_REMOTE_ID, fbUsedProductsUserKey);
        result.put(PROD_MY_RETAILER, retailer);
        result.put(PROD_MY_LOC_ROOM, locationRoom);
        result.put(PROD_MY_LOC_IN_ROOM, locationInRoom);
        result.put(PROD_MY_PACK_PRICE, packPrice);
        result.put(PROD_MY_LOCAL_IMAGE_URI, localImageUri);
        result.put(PROD_MY_CREATE_DATE, myCreateDate);
        result.put(PROD_MY_LAST_UPDATE, myLastUpdate);

        return result;
    }


    @Override
    public int describeContents() {
        return 0;
    }

    public static final Creator<DmProdMy> CREATOR = new Creator<DmProdMy>() {
        @Override
        public DmProdMy createFromParcel(Parcel in) {
            return new DmProdMy(in);
        }

        @Override
        public DmProdMy[] newArray(int size) {
            return new DmProdMy[size];
        }
    };

    @Override
    public String toString() {
        return "Product ID: " + this.id + "\n" +
                "Community product ID: " + this.communityProductId + "\n" +
                "FbUsedProductsUserKey: " + this.fbUsedProductsUserKey + "\n" +
                "FbProductReferenceKey: " + this.fbProductReferenceKey + "\n" +
                "Retailer: " + this.retailer + "\n" +
                "Location room: " + this.locationRoom + "\n" +
                "Location in room: " + this.locationInRoom + "\n" +
                "Pack price: " + this.packPrice + "\n" +
                "Local image Uri: " + this.localImageUri + "\n" +
                "Create date: " + this.myCreateDate + "\n" +
                "Last update: " + this.myLastUpdate;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getCommunityProductId() {
        return communityProductId;
    }

    public void setCommunityProductId(int communityProductId) {
        this.communityProductId = communityProductId;
    }

    public String getFbUsedProductsUserKey() {
        return fbUsedProductsUserKey;
    }

    public void setFbUsedProductsUserKey(String fbUsedProductsUserKey) {
        this.fbUsedProductsUserKey = fbUsedProductsUserKey;
    }

    public String getFbProductReferenceKey() {
        return fbProductReferenceKey;
    }

    public void setFbProductReferenceKey(String fbProductReferenceKey) {
        this.fbProductReferenceKey = fbProductReferenceKey;
    }

    public String getRetailer() {
        return retailer;
    }

    public void setRetailer(String retailer) {
        this.retailer = retailer;
    }

    public String getLocationRoom() {
        return locationRoom;
    }

    public void setLocationRoom(String locationRoom) {
        this.locationRoom = locationRoom;
    }

    public String getLocationInRoom() {
        return locationInRoom;
    }

    public void setLocationInRoom(String locationInRoom) {
        this.locationInRoom = locationInRoom;
    }

    public double getPackPrice() {
        return packPrice;
    }

    public void setPackPrice(double packPrice) {
        this.packPrice = packPrice;
    }

    @NonNull
    public String getLocalImageUri() {
        return localImageUri;
    }

    public void setLocalImageUri(@NonNull String localImageUri) {
        this.localImageUri = localImageUri;
    }

    public long getMyCreateDate() {
        return myCreateDate;
    }

    public void setMyCreateDate(long myCreateDate) {
        this.myCreateDate = myCreateDate;
    }

    public long getMyLastUpdate() {
        return myLastUpdate;
    }

    public void setMyLastUpdate(long myLastUpdate) {
        this.myLastUpdate = myLastUpdate;
    }
}
